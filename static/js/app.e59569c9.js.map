{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/views/page/Cloud.vue?a0f9","webpack:///./src/App.vue","webpack:///./src/App.vue?6697","webpack:///./src/views/Home.vue","webpack:///./src/views/Home.vue?378f","webpack:///./src/views/page/Water.vue","webpack:///./src/views/page/Water.vue?9d62","webpack:///./src/views/page/Shadow.vue","webpack:///./src/views/page/Shadow.vue?b099","webpack:///./src/views/page/Cloud.vue","webpack:///./src/views/page/Cloud.vue?2b8d","webpack:///./src/router/index.js","webpack:///./src/main.js","webpack:///./src/App.vue?e9e1","webpack:///./src/views/page/Water.vue?36b0","webpack:///./src/views/page/Shadow.vue?91f4"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_createBlock","_component_router_view","script","__exports__","render","class","_createElementBlock","_createElementVNode","onClick","$setup","components","setup","useRoute","router","useRouter","water","cloud","id","_hoisted_2","_hoisted_3","mounted","scene","THREE","scene2","lightCamera","innerWidth","innerHeight","rotation","x","Math","PI","y","z","position","directionalLight","add","updateProjectionMatrix","composer","shaderPass","renderPass","viewPortMatrixInverse","getViewPortMatrixInverse","width","height","near","far","baseUrl","dom","document","getElementById","camera","mat","GLTFLoader","setPath","load","gltf","bfGeo","copy","children","geometry","map","material","getShadowMaterial","ms","renderer","antialias","setSize","setAnimationLoop","animation","RenderPass","EffectComposer","addPass","ShaderPass","glslVersion","uniforms","projectionMatrixInverse","projectionMatrix","vertexShader","fragmentShader","OrbitControls","domElement","appendChild","target","setupRenderTargetShadow","targetN","setupRenderTargetNormal","targetLightCamera","setupRenderTargetLightCamera","time","sin","cos","setRenderTarget","tDepth","depthTexture","tNormal","texture","groundTexture","onlyShadow","groundDepth","minFilter","magFilter","stencilBuffer","format","type","normalRenderTarget","devicePixelRatio","viewPort","depthRange","_viewPortMatrix","_viewPortMatrixInverse","set","getInverse","onResize","aspect","getPixelRatio","tx","matrixWorldInverse","scale","onresize","helper","mesh","updateMatrix","castShadow","depthTextureFromLightCamera","setupRenderTarget","e","wrapS","wrapT","repeat","background","light","clouds","createCloud","depthMain","clone","transparent","matrixWorld","routes","path","component","Home","Water","Shadow","Cloud","createRouter","history","createWebHashHistory","createApp","App","use","mount"],"mappings":"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","file":"static/js/app.e59569c9.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/webgl_three_cesium/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./Cloud.vue?vue&type=style&index=0&id=c9276446&scoped=true&lang=scss\"","<template>\n  <router-view/>\n</template>\n\n<style lang=\"scss\">\n\n*{\n  margin: 0px;\n  padding: 0px;\n}\nhtml,body,#app{\n  height: 100%;\n}\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=14635969\"\nconst script = {}\n\nimport \"./App.vue?vue&type=style&index=0&id=14635969&lang=scss\"\n\nimport exportComponent from \"C:\\\\Users\\\\hasee\\\\Desktop\\\\简历demo\\\\linshaoping\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"home\">\n    <div @click=\"water\">去水</div>\n    <div @click=\"cloud\">去云</div>\n  </div>\n</template>\n\n<script>\nimport { useRoute ,useRouter} from 'vue-router'\nexport default {\n  name: 'Home',\n  components: {\n    \n  },\n  setup(){//props,contex\n    const route = useRoute()\n    const router = useRouter()\n    function water(){\n      router.push('/water')\n    }\n    function cloud(){\n      router.push('/cloud')\n    }\n    return{\n      water,\n      cloud\n    }\n  },\n  \n}\n</script>\n","import { render } from \"./Home.vue?vue&type=template&id=058cd2f2\"\nimport script from \"./Home.vue?vue&type=script&lang=js\"\nexport * from \"./Home.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\hasee\\\\Desktop\\\\简历demo\\\\linshaoping\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <div class=\"waterRoot\">\r\n        <div id='threeContainer'>\r\n\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n/**\r\n * 半成品，接下来处理地板贴图\r\n * 俯角透明，优先级高\r\n * 阴影、优先级低\r\n */\r\nimport * as THREE from 'three';\r\nimport { onMounted } from '@vue/runtime-core';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport {ShaderPass} from 'three/examples/jsm/postprocessing/ShaderPass.js'\r\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js'\r\nimport { VertexNormalsHelper } from 'three/examples/jsm/helpers/VertexNormalsHelper.js';\r\n\r\nexport default {\r\n    name:'Water',\r\n    mounted(){\r\n        const scene = new THREE.Scene();\r\n        const scene2 = new THREE.Scene();\r\n\r\n        var lightCamera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 1000 ); \r\n        \r\n        lightCamera.rotation.x = Math.PI/2\r\n        lightCamera.rotation.y = Math.PI\r\n        lightCamera.rotation.z = Math.PI/2\r\n        lightCamera.position.x = 15\r\n        lightCamera.position.y = 15\r\n\r\n        const directionalLight = new THREE.DirectionalLight( 0xffffff, 1 );\r\n        directionalLight.rotation.x = -Math.PI/2\r\n        directionalLight.rotation.y = Math.PI/4\r\n        directionalLight.rotation.z = Math.PI/2\r\n        directionalLight.position.x = 15\r\n        directionalLight.position.y = 15\r\n        scene.add( directionalLight );\r\n\r\n        lightCamera.updateProjectionMatrix()\r\n        const helper = new THREE.CameraHelper( lightCamera );\r\n        // scene.add( helper );\r\n        scene.add(lightCamera)\r\n        \r\n        var viewPortMatrixInverse = getViewPortMatrixInverse(\r\n                    {x: 0, y: 0, width: window.innerWidth, height: window.innerHeight},\r\n                    {near: 0.01, far: 1000}\r\n            );\r\n        window.baseUrl = ''//'https://lsp-1310473618.cos.ap-guangzhou.myqcloud.com/'\r\n        \r\n        \r\n            let composer,shaderPass,renderPass\r\n            var dom = document.getElementById('threeContainer')\r\n            const camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 500 );\r\n            camera.position.z = 10.2;\r\n            camera.position.y = 0.5;\r\n            scene.add(camera)\r\n            \r\n            \r\n            const geometry = new THREE.PlaneGeometry( 10, 10,1,1 );\r\n            \r\n           \r\n\r\n            //加载地板\r\n            //被反射物\r\n            var mat\r\n            new GLTFLoader()\r\n\t\t\t\t\t.setPath( window.baseUrl+'/ground/' )\r\n\t\t\t\t\t.load( 'scene.gltf', function ( gltf ) {\r\n                        var bfGeo = new THREE.BufferGeometry()\r\n                        bfGeo.copy(gltf.scene.children[0].children[0].children[0].geometry)\r\n                        let map = gltf.scene.children[0].children[0].children[0].material.map\r\n                        mat = getShadowMaterial(map)\r\n                        var ms = new THREE.Mesh(bfGeo,mat)\r\n                        ms.rotation.x = -Math.PI/2\r\n                        ms.position.y = 0.\r\n                        scene2.add( ms );\r\n                        // gltf.scene.position.z = -2\r\n\t\t\t\t\t} );\r\n            \r\n\r\n            const renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n            renderer.setSize( window.innerWidth, window.innerHeight );\r\n            renderer.setAnimationLoop( animation );\r\n            renderPass = new RenderPass(scene, camera);\r\n            composer = new EffectComposer( renderer );\r\n            composer.addPass(renderPass);\r\n\r\n            \r\n            \r\n            shaderPass = new ShaderPass({\r\n                        glslVersion:THREE.GLSL3,\r\n                        uniforms: {\r\n                        'tDiffuse': { value: null },\r\n                        'tDepth': { value: null },\r\n                        'cameraNear': { value: camera.near },\r\n                        'cameraFar': { value: camera.far },\r\n                        'tNormal': {value:null},\r\n                        'groundDepth': {value:null},\r\n                        'viewPortMatrixInverse': { value: viewPortMatrixInverse},\r\n                        'projectionMatrixInverse': {value: camera.projectionMatrixInverse},\r\n                        'cameraProjectionMatrix':{value: camera.projectionMatrix},\r\n                        'u_resolution':{value:new THREE.Vector2(window.innerWidth,window.innerHeight)},\r\n                        'groundTexture':{ value:null},\r\n                        'onlyShadow':{value:null}\r\n                        },\r\n                        vertexShader: /* glsl */`\r\n                        varying vec2 vUv;\r\n                        varying vec3 v_position;\r\n                        varying mat4 v_mvMatrix;\r\n                        void main() {\r\n                            vUv = uv;\r\n                            v_mvMatrix = modelViewMatrix;\r\n                            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n        \r\n                        }`,\r\n        \r\n                        fragmentShader: /* glsl */`\r\n                        #include <packing>\r\n                        varying vec2 vUv;\r\n                        uniform float cameraNear;\r\n                        uniform float cameraFar;\r\n                        uniform sampler2D tDiffuse;\r\n                        uniform sampler2D tDepth;\r\n                        uniform sampler2D tNormal;\r\n                        uniform sampler2D groundDepth;\r\n                        uniform mat4 viewPortMatrixInverse;\r\n                        uniform mat4 projectionMatrixInverse;\r\n                        uniform mat4 cameraProjectionMatrix;\r\n                        uniform vec2 u_resolution;\r\n                        uniform sampler2D groundTexture;\r\n                        uniform sampler2D onlyShadow;\r\n                        float readDepth( sampler2D depthSampler, vec2 coord ) {\r\n                            float fragCoordZ = texture2D( depthSampler, coord ).x;\r\n                            float viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\r\n                            return viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\r\n                        }\r\n                        vec3 getViewNormal( const in vec2 uv ) {\r\n                            return unpackRGBToNormal( texture2D( tNormal, uv ).xyz );\r\n                        }\r\n                        float getViewZ( const in float depth ) {\r\n                            return perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\r\n                        }\r\n                        vec4 getViewPosition( const in vec2 uv, const in float depth/*clip space*/, const in float clipW ) {\r\n                            vec4 clipPosition = vec4( ( vec3( uv, depth ) - 0.5 ) * 2.0, 1.0 );//ndc\r\n                            clipPosition *= clipW; //clip\r\n                            return ( projectionMatrixInverse * clipPosition );//view\r\n                        }\r\n                        vec4 blur(in sampler2D tx,in vec2 uv){\r\n                            float Pi = 6.28318530718; // Pi*2\r\n                            // GAUSSIAN BLUR SETTINGS {{{\r\n                            float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\r\n                            float Quality = 4.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\r\n                            float Size = 10.0; // BLUR SIZE (Radius)\r\n                            // GAUSSIAN BLUR SETTINGS }}}\r\n                        \r\n                            vec2 Radius = Size/vec2(1440.,1440.);\r\n                            \r\n                            \r\n                            // Pixel colour\r\n                            vec4 Color = texture(tx, uv);\r\n                            \r\n                            // Blur calculations\r\n                            for( float d=0.0; d<Pi; d+=Pi/Directions)\r\n                            {\r\n                                for(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\r\n                                {\r\n                                    Color += texture( tx, uv+vec2(cos(d),sin(d))*Radius*i);\t\t\r\n                                }\r\n                            }\r\n                            \r\n                            // Output to screen\r\n                            Color /= Quality * Directions - 15.0;\r\n                            return Color;\r\n                        }\r\n                        void main() {\r\n                            float maxDistance = 3.;\r\n                            float resolution  = 0.3;\r\n                            float thickness   = .15;\r\n                            \r\n                            \r\n                            vec4 baseColor = texture2D(groundTexture,vUv);\r\n                            vec4 olShadow = blur(onlyShadow,vUv);\r\n                            if(olShadow.a>0.2){\r\n                                baseColor.rgb = baseColor.rgb-olShadow.r*0.3;\r\n                            }\r\n                            vec4 color = texture2D(tDiffuse,vUv);\r\n                            vec4 n = vec4(normalize(getViewNormal(vUv)),1.);\r\n                            float depthMain = texture2D(tDepth,vUv).r;\r\n                            float depthGround = texture2D(groundDepth,vUv).r;\r\n        \r\n                            vec2 groundUv;//叠上贴图，需要把地板视图转为uv\r\n                            if(\r\n                                // (n.r!=0. ||n.g!=0. ||n.b!=0.) && \r\n                                depthGround<depthMain){\r\n                                //先获取片元到视角向量(eyePos)\r\n                                float viewZ = getViewZ( depthGround );\r\n                                float clipW = cameraProjectionMatrix[2][3] * viewZ+cameraProjectionMatrix[3][3];\r\n                                vec4 viewPosition= getViewPosition( vUv, depthGround, clipW ); //地面视图空间坐标获取到了\r\n\r\n                                //为了算相机与地面夹角，从而用于透明度\r\n                                vec3 upDirection = n.xyz;\r\n                                vec3 centerToEyeDirection = vec3(0.,0.,1.);\r\n                                float cosValue = 1.-dot(upDirection,centerToEyeDirection);\r\n                                \r\n                                //反射方向\r\n                                vec3 reflectDir = normalize(reflect(viewPosition.xyz,n.xyz));\r\n                                //开始前进\r\n                                color = vec4(1.);//texture2D(tDiffuse,vec2(reflectDir.y,reflectDir.x));\r\n                                \r\n        \r\n                                \r\n        \r\n                                vec2 texSize  = u_resolution;\r\n                                vec2 texCoord = gl_FragCoord.xy / texSize;\r\n\r\n                                vec4 uv = vec4(0.0);\r\n\r\n                                vec4 startView = vec4(viewPosition.xyz + (reflectDir *           0.), 1.);\r\n                                vec4 endView   = vec4(viewPosition.xyz + (reflectDir * maxDistance), 1.);\r\n\r\n                                vec4 startFrag =  startView;\r\n                                startFrag = cameraProjectionMatrix * startView;\r\n                                startFrag.xyz/=startFrag.w;\r\n                                startFrag.xy  = startFrag.xy  * 0.5 + 0.5;\r\n                                startFrag.xy  *= texSize;\r\n        \r\n                                vec4 endFrag =  endView;\r\n                                endFrag = cameraProjectionMatrix * endView;\r\n                                endFrag.xyz/=endFrag.w;\r\n                                endFrag.xy  = endFrag.xy * 0.5 + 0.5;\r\n                                endFrag.xy  *= texSize;\r\n        \r\n                                vec4 positionTo = viewPosition;\r\n        \r\n                                \r\n                                vec2 frag = startFrag.xy;\r\n                                uv.xy = frag / texSize;\r\n\r\n                                float deltaX    = endFrag.x - startFrag.x;\r\n                                float deltaY    = endFrag.y - startFrag.y;\r\n                                float useX      = abs(deltaX) >= abs(deltaY) ? 1. : 0.;\r\n                                float delta     = mix(abs(deltaY), abs(deltaX), useX) * clamp(resolution, 0., 1.);\r\n                                vec2  increment = vec2(deltaX, deltaY) / max(delta, 0.001);\r\n                                \r\n                                //float curPositionX;\r\n                                //float curPositionY;\r\n                                // curPositionX = (startFrag.x)*(1.-search1)+(endFrag.x)*search1;\r\n                                // curPositionY = (startFrag.y)*(1.-search1)+(endFrag.y)*search1;\r\n        \r\n        \r\n                                float search0 = 0.;\r\n                                float search1 = 0.;\r\n                                \r\n                                int hit0 = 0;\r\n                                int hit1 = 0;\r\n        \r\n                                float viewDistance = startView.z;\r\n                                float depth        = 0.;\r\n        \r\n                                float i = 0.;\r\n                                float stp = mix(increment.x,increment.y,useX);\r\n                                for(i=0.;i<delta;i+=stp){\r\n                                    // if(delta>5000.){\r\n                                    //     gl_FragColor = baseColor;\r\n                                    //     return;\r\n                                    // }\r\n                                    frag      += increment;\r\n                                    uv.xy      = frag / texSize;\r\n                                    if(uv.x>1. || uv.y>1. || uv.x<0. || uv.y<0.){\r\n                                        break;\r\n                                    }\r\n                                    \r\n                                    float dd = texture2D(tDepth,uv.xy).r;\r\n                                    float viewZZ = getViewZ( dd );\r\n                                    float clipWW = cameraProjectionMatrix[2][3] * viewZZ+cameraProjectionMatrix[3][3];\r\n                                    positionTo = vec4( getViewPosition( uv.xy, dd, clipWW ).xyz,1.); //地面视图空间坐标获取到了\r\n                                   \r\n                                    \r\n                                    search1 = mix\r\n                                        ( (frag.y - startFrag.y) / deltaY\r\n                                        , (frag.x - startFrag.x) / deltaX\r\n                                        , useX\r\n                                        );\r\n                                    search1 = clamp(search1, 0.0, 1.0);\r\n                                    viewDistance = (startView.z * endView.z) / mix(endView.z, startView.z, search1);\r\n                                    depth        = abs(positionTo.z)-abs(viewDistance);\r\n                                    float wtfD = abs(viewDistance)-abs(positionTo.z);\r\n                                    if (\r\n                                        depth>wtfD &&\r\n                                        depth < thickness \r\n                                        && dd!=1. ) \r\n                                    {\r\n                                        hit0 = 1;\r\n                                        break;\r\n                                    }\r\n                                }\r\n        \r\n                                if(hit0>0){\r\n                                    color = texture2D(tDiffuse,uv.xy);\r\n                                    color = mix(baseColor,color,cosValue);\r\n                                    //可以在这里模糊化反射\r\n                                    \r\n                                }else{\r\n                                    color = baseColor;\r\n                                }\r\n                                \r\n                            }\r\n                            \r\n                            gl_FragColor = color;\r\n        \r\n                        }`\r\n                    });\r\n            composer.addPass(shaderPass)\r\n\r\n            \r\n\r\n            \r\n\r\n            const controls = new OrbitControls( camera, renderer.domElement );\r\n            dom.appendChild( renderer.domElement );\r\n\r\n       \r\n\r\n            var target = setupRenderTargetShadow()\r\n            var targetN = setupRenderTargetNormal()\r\n            var targetLightCamera = setupRenderTargetLightCamera()\r\n\r\n            function animation( time ) {\r\n                \r\n                \r\n                lightCamera.position.x = Math.sin(time*0.005)*8\r\n                lightCamera.position.z = Math.cos(time*0.001)*8\r\n                directionalLight.position.x = Math.sin(time*0.005)*8\r\n                directionalLight.position.z = Math.cos(time*0.001)*8\r\n                \r\n\r\n                composer.renderer.setRenderTarget( target );\r\n                composer.renderer.render(scene,camera);\r\n                shaderPass.uniforms.tDepth.value = target.depthTexture\r\n\r\n                // 把光相机深度传入地板着色器\r\n                composer.renderer.setRenderTarget( targetLightCamera );\r\n                composer.renderer.render(scene,lightCamera);\r\n                if(mat)\r\n                    mat.uniforms['depthTextureFromLightCamera'].value = targetLightCamera.depthTexture\r\n                \r\n                \r\n\r\n                composer.renderer.setRenderTarget( targetN );\r\n                composer.renderer.render(scene2,camera);\r\n                shaderPass.uniforms.tNormal.value = targetN.texture[1]\r\n                shaderPass.uniforms.groundTexture.value = targetN.texture[0]\r\n                shaderPass.uniforms.onlyShadow.value = targetN.texture[2]\r\n                shaderPass.uniforms.groundDepth.value = targetN.depthTexture\r\n                \r\n\r\n                \r\n\r\n                composer.renderer.setRenderTarget( null );\r\n                composer.render();\r\n            }\r\n\r\n\r\n\r\n            function setupRenderTargetShadow() {\r\n                var target = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );\r\n                target.texture.minFilter = THREE.NearestFilter;\r\n                target.texture.magFilter = THREE.NearestFilter;\r\n                target.stencilBuffer = ( THREE.DepthFormat === THREE.DepthStencilFormat ) ? true : false;\r\n                target.depthTexture = new THREE.DepthTexture();\r\n                target.depthTexture.format = THREE.DepthFormat;\r\n                target.depthTexture.type = THREE.UnsignedShortType;\r\n                target.setSize( window.innerWidth, window.innerHeight );\r\n                return target\r\n            }\r\n            function setupRenderTargetNormal(){\r\n                var normalRenderTarget = new THREE.WebGLMultipleRenderTargets(\r\n\t\t\t\t\twindow.innerWidth * window.devicePixelRatio,\r\n\t\t\t\t\twindow.innerHeight * window.devicePixelRatio,\r\n\t\t\t\t\t3\r\n\t\t\t\t);\r\n                normalRenderTarget.stencilBuffer = ( THREE.DepthFormat === THREE.DepthStencilFormat ) ? true : false;\r\n                normalRenderTarget.depthTexture = new THREE.DepthTexture();\r\n                normalRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n                normalRenderTarget.depthTexture.type = THREE.UnsignedShortType;\r\n                normalRenderTarget.setSize( window.innerWidth, window.innerHeight );\r\n                return normalRenderTarget\r\n            }\r\n            function setupRenderTargetLightCamera(){\r\n                var t = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );\r\n                t.texture.minFilter = THREE.NearestFilter;\r\n                t.texture.magFilter = THREE.NearestFilter;\r\n                t.stencilBuffer = ( THREE.DepthFormat === THREE.DepthStencilFormat ) ? true : false;\r\n                t.depthTexture = new THREE.DepthTexture();\r\n                t.depthTexture.format = THREE.DepthFormat;\r\n                t.depthTexture.type = THREE.UnsignedShortType;\r\n                t.setSize( window.innerWidth, window.innerHeight );\r\n                return t\r\n            }\r\n            \r\n\r\n            //被反射物\r\n            new GLTFLoader()\r\n\t\t\t\t\t.setPath( window.baseUrl+'/girl/' )\r\n\t\t\t\t\t.load( 'scene.gltf', function ( gltf ) {\r\n                        scene.add(gltf.scene)\r\n                        gltf.scene.scale.x = 0.01\r\n                        gltf.scene.scale.y = 0.01\r\n                        gltf.scene.scale.z = 0.01\r\n                        gltf.scene.position.y = 0.04\r\n                        // gltf.scene.position.z = -3\r\n                        // gltf.scene.position.z = -2\r\n\t\t\t\t\t} );\r\n\r\n\r\n            function getViewPortMatrixInverse(viewPort, depthRange) {\r\n                var _viewPortMatrix = new THREE.Matrix4();\r\n                var _viewPortMatrixInverse = new THREE.Matrix4();\r\n                _viewPortMatrix.set(\r\n                        viewPort.width / 2, 0, 0, viewPort.x + viewPort.width / 2,\r\n                        0, viewPort.height / 2, 0, viewPort.y + viewPort.height / 2,\r\n                        0, 0, (depthRange.far - depthRange.near) / 2, (depthRange.far + depthRange.near) / 2,\r\n                        0, 0, 0, 1\r\n                );\r\n                _viewPortMatrixInverse.getInverse(_viewPortMatrix, true);\r\n                return _viewPortMatrixInverse;\r\n            }\r\n\r\n            function onResize(){\r\n                camera.aspect = window.innerWidth / window.innerHeight;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n                lightCamera.aspect = window.innerWidth / window.innerHeight;\r\n                lightCamera.updateProjectionMatrix();\r\n\r\n\t\t\t\tcomposer.renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n\t\t\t\tconst dpr = composer.renderer.getPixelRatio();\r\n\t\t\t\ttargetN.setSize( window.innerWidth, window.innerHeight );\r\n                target.setSize( window.innerWidth, window.innerHeight );\r\n\r\n            }\r\n            window.onresize = onResize\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            function getShadowMaterial(tx){\r\n                var material = new THREE.ShaderMaterial({\r\n                    glslVersion:THREE.GLSL3,\r\n                    // lights:true,\r\n                    uniforms: {\r\n                        'gTexture':{value:tx},\r\n                        'u_vMatrixFromLight':{value:lightCamera.matrixWorldInverse},\r\n                        'u_ProjectionMatrixFromLight':{value:lightCamera.projectionMatrix},\r\n                        'depthTextureFromLightCamera':{value:null},\r\n                        // 'groundNTx':{value:textureNormal},\r\n                    },\r\n                    vertexShader: /* glsl */`\r\n                    varying vec2 vUv;\r\n                    varying vec3 v_normal;\r\n                    varying vec4 result;\r\n                    uniform mat4 u_vMatrixFromLight;\r\n                    uniform mat4 u_ProjectionMatrixFromLight;\r\n                    varying vec4 v_posFromLight;\r\n                    void main() {\r\n                        vUv = uv;\r\n                        v_normal = normalMatrix * normalize(normal);\r\n\r\n                        v_posFromLight = u_ProjectionMatrixFromLight * u_vMatrixFromLight * modelMatrix * vec4( position, 1.0 );\r\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n                    }`,\r\n\r\n                    fragmentShader: /* glsl */`\r\n                    #include <packing>\r\n                    varying vec2 vUv;\r\n                    varying vec3 v_normal;\r\n                    uniform sampler2D gTexture;\r\n                    layout(location = 0) out vec4 gColor;\r\n                    layout(location = 1) out vec4 gNormal;\r\n                    layout(location = 2) out vec4 onlyShadow;\r\n                    \r\n                    varying vec4 v_posFromLight;\r\n                    uniform sampler2D depthTextureFromLightCamera;\r\n                    float blur(in sampler2D tx,in vec2 uv){\r\n                        float Pi = 6.28318530718; // Pi*2\r\n                        // GAUSSIAN BLUR SETTINGS {{{\r\n                        float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\r\n                        float Quality = 3.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\r\n                        float Size = 8.0; // BLUR SIZE (Radius)\r\n                        // GAUSSIAN BLUR SETTINGS }}}\r\n                    \r\n                        vec2 Radius = Size/vec2(1920.,1920.);\r\n                        \r\n                        \r\n                        // Pixel colour\r\n                        vec4 Color = texture(tx, uv);\r\n                        \r\n                        // Blur calculations\r\n                        for( float d=0.0; d<Pi; d+=Pi/Directions)\r\n                        {\r\n                            for(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\r\n                            {\r\n                                Color += texture( tx, uv+vec2(cos(d),sin(d))*Radius*i);\t\t\r\n                            }\r\n                        }\r\n                        \r\n                        // Output to screen\r\n                        Color /= Quality * Directions - 15.0;\r\n                        return Color.r;\r\n                    }\r\n                    void main() {\r\n                        vec2 uv = vUv;\r\n\r\n                        vec3 n = v_normal;\r\n                        vec3 nv_color = n*0.5  + 0.5;\r\n                        vec4 final2 = vec4(nv_color,1.);\r\n                        gNormal = final2;\r\n\r\n                        vec3 shadowCoord = (v_posFromLight.xyz/v_posFromLight.w)/2.0 + 0.5;\r\n                        float depth = texture2D(depthTextureFromLightCamera, shadowCoord.xy).r;\r\n                        // float depth = blur(depthTextureFromLightCamera, shadowCoord.xy);\r\n                        float visibility = (shadowCoord.z > depth) ? 1. : .0; // 判断片元是否在阴影中\r\n\r\n                        \r\n                        vec4 finalColor = texture2D(gTexture,uv);\r\n                        vec4 sd;\r\n                        if(visibility==1.){\r\n                            sd = vec4(1.,1.,1.,1.);\r\n                        }else{\r\n                            sd = vec4(0.,0.,0.,0.);\r\n                        }\r\n                        gColor  = finalColor;\r\n                        onlyShadow = sd;\r\n                    }`\r\n                });\r\n                return material\r\n            }\r\n        \r\n    }\r\n}\r\n</script>\r\n<style lang='scss' scoped>\r\n.waterRoot{\r\n    height: 100%;\r\n    background: rgb(116, 116, 116);\r\n}\r\n</style>","import { render } from \"./Water.vue?vue&type=template&id=b755fbd6&scoped=true\"\nimport script from \"./Water.vue?vue&type=script&lang=js\"\nexport * from \"./Water.vue?vue&type=script&lang=js\"\n\nimport \"./Water.vue?vue&type=style&index=0&id=b755fbd6&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\hasee\\\\Desktop\\\\简历demo\\\\linshaoping\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-b755fbd6\"]])\n\nexport default __exports__","<template>\r\n    <div class=\"waterRoot\">\r\n        <div id='threeContainer'>\r\n\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n/**\r\n * 半成品，接下来处理地板贴图\r\n * 俯角透明，优先级高\r\n * 阴影、优先级低\r\n */\r\nimport * as THREE from 'three';\r\nimport { onMounted } from '@vue/runtime-core';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport {ShaderPass} from 'three/examples/jsm/postprocessing/ShaderPass.js'\r\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js'\r\nimport { VertexNormalsHelper } from 'three/examples/jsm/helpers/VertexNormalsHelper.js';\r\n\r\nexport default {\r\n    name:'Water',\r\n    mounted(){\r\n        const scene = new THREE.Scene();\r\n\r\n        var lightCamera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 5, 1000 ); \r\n        lightCamera.position.y = 7\r\n        lightCamera.rotation.x = -Math.PI/2\r\n        lightCamera.updateProjectionMatrix()\r\n        const helper = new THREE.CameraHelper( lightCamera );\r\n        scene.add( helper );\r\n        scene.add(lightCamera)\r\n        \r\n     \r\n        window.baseUrl = ''//'https://lsp-1310473618.cos.ap-guangzhou.myqcloud.com/'\r\n        var loadSuccess = []\r\n       \r\n\r\n        let composer,shaderPass,renderPass\r\n        var dom = document.getElementById('threeContainer')\r\n        const camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 500 );\r\n        camera.position.z = 10.2;\r\n        camera.position.y = 0.5;\r\n        scene.add(camera)\r\n            \r\n            \r\n            const geometry = new THREE.PlaneGeometry( 10, 10,1,1 );\r\n            const material = new THREE.ShaderMaterial({\r\n                glslVersion:THREE.GLSL3,\r\n                // lights:true,\r\n                uniforms: {\r\n                    'u_vMatrixFromLight':{value:lightCamera.matrixWorldInverse},\r\n                    'u_ProjectionMatrixFromLight':{value:lightCamera.projectionMatrix},\r\n                    'depthTextureFromLightCamera':{value:null},\r\n                },\r\n                vertexShader: /* glsl */`\r\n                varying vec2 vUv;\r\n                uniform mat4 u_vMatrixFromLight;\r\n                uniform mat4 u_ProjectionMatrixFromLight;\r\n                varying vec4 v_posFromLight;\r\n                void main() {\r\n                    vUv = uv;\r\n                    v_posFromLight = u_ProjectionMatrixFromLight * u_vMatrixFromLight * modelMatrix * vec4( position, 1.0 );\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n                }`,\r\n\r\n                fragmentShader: /* glsl */`\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                layout(location = 0) out vec4 gColor;\r\n                varying vec4 v_posFromLight;\r\n                uniform sampler2D depthTextureFromLightCamera;\r\n                void main() {\r\n                    vec2 uv = vUv;\r\n                    vec3 shadowCoord = (v_posFromLight.xyz/v_posFromLight.w)/2.0 + 0.5;\r\n                    float depth = texture2D(depthTextureFromLightCamera, shadowCoord.xy).r;\r\n                    float visibility = (shadowCoord.z > depth) ? 1. : .0; // 判断片元是否在阴影中\r\n                    \r\n                    gColor  = vec4(depth,0.,0.,1.);//vec4(vec3(1.-visibility),1.);\r\n\r\n                }`\r\n            });\r\n            const mesh = new THREE.Mesh( geometry, material );\r\n            mesh.rotation.x = -Math.PI/2\r\n            mesh.updateMatrix()\r\n            scene.add( mesh );\r\n            \r\n\r\n            \r\n            const renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n            renderer.setSize( window.innerWidth, window.innerHeight );\r\n            renderer.setAnimationLoop( animation );\r\n            renderPass = new RenderPass(scene, camera);\r\n            composer = new EffectComposer( renderer );\r\n            composer.addPass(renderPass);\r\n\r\n            \r\n            \r\n            shaderPass = new ShaderPass({\r\n                        glslVersion:THREE.GLSL3,\r\n                        uniforms: {\r\n                        'tDiffuse': { value: null },\r\n                        'tDepth': { value: null },\r\n                        'cameraNear': { value: camera.near },\r\n                        'cameraFar': { value: camera.far },\r\n                        'projectionMatrixInverse': {value: camera.projectionMatrixInverse},\r\n                        'cameraProjectionMatrix':{value: camera.projectionMatrix},\r\n                        'u_resolution':{value:new THREE.Vector2(window.innerWidth,window.innerHeight)},\r\n                        },\r\n                        vertexShader: /* glsl */`\r\n                        varying vec2 vUv;\r\n                        varying vec3 v_position;\r\n                        varying mat4 v_mvMatrix;\r\n                        void main() {\r\n                            vUv = uv;\r\n                            v_mvMatrix = modelViewMatrix;\r\n                            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n        \r\n                        }`,\r\n        \r\n                        fragmentShader: /* glsl */`\r\n                        #include <packing>\r\n                        varying vec2 vUv;\r\n                        uniform float cameraNear;\r\n                        uniform float cameraFar;\r\n                        uniform sampler2D tDiffuse;\r\n                        uniform sampler2D tDepth;\r\n                        uniform mat4 projectionMatrixInverse;\r\n                        uniform mat4 cameraProjectionMatrix;\r\n                        uniform vec2 u_resolution;\r\n                        \r\n                        void main() {\r\n                            \r\n                            vec4 color = texture2D(tDiffuse,vUv);\r\n                            gl_FragColor = color;\r\n        \r\n                        }`\r\n                    });\r\n            composer.addPass(shaderPass)\r\n\r\n            const directionalLight = new THREE.DirectionalLight( 0xffffff, 1 );\r\n            directionalLight.castShadow = true;\r\n            directionalLight.rotation.x = Math.PI/2\r\n            directionalLight.rotation.z = Math.PI/2\r\n            directionalLight.position.x = 50\r\n            directionalLight.position.y = 10\r\n            scene.add( directionalLight );\r\n\r\n            \r\n\r\n            const controls = new OrbitControls( camera, renderer.domElement );\r\n            dom.appendChild( renderer.domElement );\r\n\r\n            \r\n\r\n            var target = setupRenderTargetShadow()\r\n\r\n            \r\n            function animation( time ) {\r\n                \r\n                \r\n                lightCamera.position.x = Math.sin(time*0.001)*2\r\n                lightCamera.position.z = Math.cos(time*0.001)*2\r\n\r\n                composer.renderer.setRenderTarget( target );\r\n                composer.renderer.render(scene,lightCamera);\r\n                material.uniforms.depthTextureFromLightCamera.value = target.depthTexture\r\n\r\n                composer.renderer.setRenderTarget( null );\r\n                composer.renderer.render(scene,camera)\r\n                // composer.renderer.render(scene,camera);\r\n            }\r\n\r\n\r\n\r\n            function setupRenderTargetShadow() {\r\n                var t = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );\r\n                t.texture.minFilter = THREE.NearestFilter;\r\n                t.texture.magFilter = THREE.NearestFilter;\r\n                t.stencilBuffer = ( THREE.DepthFormat === THREE.DepthStencilFormat ) ? true : false;\r\n                t.depthTexture = new THREE.DepthTexture();\r\n                t.depthTexture.format = THREE.DepthFormat;\r\n                t.depthTexture.type = THREE.UnsignedShortType;\r\n                t.setSize( window.innerWidth, window.innerHeight );\r\n                return t\r\n            }\r\n            \r\n\r\n            //被反射物\r\n            new GLTFLoader()\r\n\t\t\t\t\t.setPath( window.baseUrl+'/car/' )\r\n\t\t\t\t\t.load( 'scene.gltf', function ( gltf ) {\r\n                        scene.add(gltf.scene)\r\n                        gltf.scene.scale.x = 0.01\r\n                        gltf.scene.scale.y = 0.01\r\n                        gltf.scene.scale.z = 0.01\r\n                        gltf.scene.position.y = 0\r\n                        // gltf.scene.position.z = -2\r\n\t\t\t\t\t} );\r\n\r\n\r\n\r\n            function onResize(){\r\n                camera.aspect = window.innerWidth / window.innerHeight;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n                lightCamera.aspect = window.innerWidth / window.innerHeight;\r\n                lightCamera.updateProjectionMatrix();\r\n\r\n\t\t\t\tcomposer.renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n\t\t\t\t// const dpr = composer.renderer.getPixelRatio();\r\n                // mesh.material.uniforms.windowW.value = window.innerWidth\r\n                // mesh.material.uniforms.windowH.value = window.innerHeight\r\n\t\t\t\t\r\n\r\n            }\r\n            window.onresize = onResize\r\n        \r\n    }\r\n}\r\n</script>\r\n<style lang='scss' scoped>\r\n.waterRoot{\r\n    height: 100%;\r\n    background: rgb(116, 116, 116);\r\n}\r\n</style>","import { render } from \"./Shadow.vue?vue&type=template&id=540e18f6&scoped=true\"\nimport script from \"./Shadow.vue?vue&type=script&lang=js\"\nexport * from \"./Shadow.vue?vue&type=script&lang=js\"\n\nimport \"./Shadow.vue?vue&type=style&index=0&id=540e18f6&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\hasee\\\\Desktop\\\\简历demo\\\\linshaoping\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-540e18f6\"]])\n\nexport default __exports__","<template>\r\n    <div class=\"cloudRoot\">\r\n        <div id='threeContainer'>\r\n\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport {ImprovedNoise} from 'three/examples/jsm/math/ImprovedNoise.js'\r\nexport default {\r\n    name:'Cloud',\r\n    mounted(){\r\n        var target = setupRenderTarget()\r\n        window.baseUrl = ''\r\n        const texture = new THREE.TextureLoader().load( window.baseUrl+'noise/perlin.png',function(e){\r\n            texture.wrapS = THREE.RepeatWrapping\r\n            texture.wrapT = THREE.RepeatWrapping\r\n            texture.repeat.set(10,10)\r\n\r\n            const scene = new THREE.Scene();\r\n            const camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 50000 );\r\n            camera.position.z = -10\r\n            scene.add(camera)\r\n\r\n            const renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n            renderer.setSize( window.innerWidth, window.innerHeight );\r\n            renderer.setAnimationLoop( animation );\r\n            const controls = new OrbitControls( camera, renderer.domElement );\r\n            var dom = document.getElementById('threeContainer')\r\n            dom.appendChild( renderer.domElement );\r\n\r\n            // const path = \"textures/\";\r\n            //     const format = '.png';\r\n            //     const urls = [\r\n            //         path + 'px' + format, path + 'nx' + format,\r\n            //         path + 'py' + format, path + 'ny' + format,\r\n            //         path + 'pz' + format, path + 'nz' + format\r\n            //     ];\r\n\r\n            //     const textureCube = new THREE.CubeTextureLoader().load( urls );\r\n            //     scene.background = textureCube;\r\n            scene.background = new THREE.Color( 0x446699 );\r\n            \r\n            new GLTFLoader()\r\n                        .setPath( window.baseUrl+'/rose/' )\r\n                        .load( 'scene.gltf', function ( gltf ) {\r\n                            gltf.scene.position.y = 28.\r\n                            scene.add( gltf.scene );\r\n                        } );\r\n            //云\r\n            var light = {position:new THREE.Vector3(0,70,100)}\r\n            var clouds = createCloud(camera,light)\r\n            scene.add( clouds );\r\n            window.onresize = onResize\r\n            function onResize(){\r\n                camera.aspect = window.innerWidth / window.innerHeight;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n                renderer.setSize( window.innerWidth, window.innerHeight );\r\n            }\r\n            function animation( time ){\r\n                if(target){\r\n                    renderer.setRenderTarget(target)\r\n                    renderer.render(scene,camera)\r\n                    if(clouds){\r\n                        clouds.material.uniforms.depthMain.value = target.depthTexture.clone()\r\n                        clouds.material.uniforms.time.value = time\r\n                    }\r\n                }\r\n                renderer.setRenderTarget(null)\r\n                renderer.render(scene,camera)\r\n            }\r\n        })\r\n        \r\n        function setupRenderTarget() {\r\n                var target = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );\r\n                target.depthTexture = new THREE.DepthTexture();\r\n                target.depthTexture.format = THREE.DepthFormat;\r\n                target.depthTexture.type = THREE.UnsignedShortType;\r\n                target.setSize( window.innerWidth, window.innerHeight );\r\n                return target\r\n            }\r\n\r\n\r\n        function createCloud(camera,light){\r\n            const geometry = new THREE.BoxGeometry( 5000, 50, 5000 );\r\n            const material = new THREE.ShaderMaterial( {\r\n                glslVersion:THREE.GLSL3,\r\n                transparent:true,\r\n                // side:THREE.DoubleSide,\r\n                uniforms: {\r\n                    'cameraPos': {value:camera.position},\r\n                    'projectionMatrixInverse': {value: camera.projectionMatrixInverse},\r\n                    'cameraProjectionMatrix':{value: camera.projectionMatrix},\r\n                    'matrixWorld': {value: camera.matrixWorld},\r\n                    'perlinTexture': { value: texture},\r\n                    'depthMain': {value:null},\r\n                    'time':{value:0},\r\n                    'centerHeight':{value:90},\r\n                    'lightPos':{value:light.position},\r\n                    'lightDirLength':{value:5},//值越大,光照部分越大\r\n                },\r\n                vertexShader: `\r\n                varying vec4 v_position;\r\n                varying vec4 v_eyePosition;\r\n                varying vec4 v_pjPosition;\r\n                varying mat4 projection;\r\n                varying mat4 view;\r\n                    void main(){\r\n                        v_position = modelMatrix * vec4( position, 1.0 );\r\n                        v_eyePosition = modelViewMatrix * vec4( position, 1.0 );\r\n                        v_pjPosition = projectionMatrix * v_eyePosition;\r\n                        projection = projectionMatrix;\r\n                        view = viewMatrix;\r\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n                    }\r\n                `,\r\n\r\n                fragmentShader: `\r\n                #include <packing>\r\n                precision highp sampler3D;\r\n                float bottom = 75.0;   // 云层底部\r\n                float top = 125.0;      // 云层顶部\r\n                float width = 5000.0;    // 云层 xz 坐标范围 [-width, width]\r\n                layout(location = 0) out vec4 gColor;\r\n                varying vec4 v_position;\r\n                varying vec4 v_eyePosition;\r\n                varying vec4 v_pjPosition;\r\n                uniform vec3 cameraPos;\r\n\r\n                uniform mat4 projectionMatrixInverse;\r\n                uniform mat4 cameraProjectionMatrix;\r\n                uniform mat4 matrixWorld;\r\n                uniform sampler2D perlinTexture;\r\n\r\n                varying mat4 projection;\r\n                varying mat4 view;\r\n\r\n                #define baseBright  vec3(1.5,1.5,1.5)    // 基础颜色 -- 亮部\r\n                #define baseDark    vec3(0.31,0.31,0.32)    // 基础颜色 -- 暗部\r\n                #define lightBright vec3(1.59, 1.47, 1.35)  // 光照颜色 -- 亮部 1.29, 1.17, 1.05\r\n                #define lightDark   vec3(0.6,0.65,0.7)      // 光照颜色 -- 暗部 0.7,0.75,0.8\r\n\r\n                uniform sampler2D depthMain;\r\n                uniform float time;\r\n                uniform vec3 lightPos;\r\n                uniform float lightDirLength;\r\n                //3D噪声\r\n                float noise(vec3 x)\r\n                {\r\n                    vec3 p = floor(x);\r\n                    vec3 f = fract(x);\r\n                    f = smoothstep(0.0, 1.0, f);\r\n                    \r\n                    vec2 uv = (p.xy+vec2(37.0, 17.0)*p.z) + f.xy;\r\n                    float v1 = 1.-texture2D( perlinTexture, (uv)/256.0, -100.0 ).x;\r\n                    float v2 = 1.-texture2D( perlinTexture, (uv + vec2(37.0, 17.0))/256.0, -100.0 ).x;\r\n                    return mix(v1, v2, f.z);\r\n                }\r\n                \r\n                float getCloudNoise(vec3 worldPos) {\r\n                    vec3 coord = worldPos;\r\n                    coord.x += time*0.0005;//移动\r\n                    coord.z += time*0.0005;\r\n                    coord.y -= time*0.001;\r\n                    coord *= 0.2;\r\n                    float n  = noise(coord) * 0.5;   coord *= 3.0;\r\n                        n += noise(coord) * 0.25;  coord *= 3.01;\r\n                        n += noise(coord) * 0.125; coord *= 3.02;\r\n                        n += noise(coord) * 0.0625; \r\n                    return max(n - 0.5, 0.0) * (1.0 / (1.0 - 0.5));\r\n                }\r\n\r\n               \r\n                \r\n                float getDensity(sampler2D noisetex, vec3 pos) {\r\n                    vec3 p = pos;\r\n                    p.z *= 0.5; //防止纹理变形，调整为正方形\r\n                    p.xyz*=0.25;\r\n                    float noise = getCloudNoise(p);\r\n                    return noise;\r\n                }\r\n                float hash1( uint n ) \r\n                {\r\n                    // integer hash copied from Hugo Elias\r\n                    n = (n << 13U) ^ n;\r\n                    n = n * (n * n * 15731U + 789221U) + 1376312589U;\r\n                    return float( n & uint(0x7fffffffU))/float(0x7fffffff);\r\n                }\r\n                vec4 getCloud(vec3 worldPos, vec3 cameraPos){\r\n                    vec3 direction = normalize(worldPos.xyz - cameraPos);\r\n                    vec3 step = direction * 0.25;\r\n                    vec4 colorSum = vec4(0);        // 积累的颜色\r\n                    vec3 point;         // 从相机出发开始测试\r\n                    //优化，把起点移动到当前片元云的坐标 gl_FragCoord.z深度求出eye坐标再转为世界坐标\r\n                    vec4 wPos =  matrixWorld * v_eyePosition;\r\n                    point = wPos.xyz;\r\n                    \r\n                    float x_ = length(v_eyePosition);\r\n                    \r\n                    int loop = int((  0.0125* (x_)  * exp(1.- 0.0125*(x_))  )*200.); //200为最高峰\r\n                    mat4 pvMatrix = projection * view;\r\n                    for(int i=0; i< loop; i++) {\r\n                        point += step;\r\n                        if(bottom>point.y || point.y>top || -width>point.x || point.x>width || -width>point.z || point.z>width) {\r\n                            break;\r\n                        }\r\n\r\n                        // 转屏幕坐标\r\n                        vec4 screenPos = pvMatrix * vec4(point, 1.0);\r\n                        screenPos /= screenPos.w;\r\n                        screenPos.xyz = screenPos.xyz * 0.5 + 0.5;\r\n                        float sampleDepth = texture2D(depthMain, screenPos.xy).r;\r\n                        float testDepth = screenPos.z;  // 测试深度\r\n                        if(sampleDepth<testDepth) {\r\n                            break;\r\n                        }\r\n                        \r\n                        float density = getDensity(perlinTexture,point) *0.5;\r\n                        \r\n                        vec3 L = normalize(lightPos - point)*lightDirLength; // 光源方向\r\n                        float lightDensity = getDensity(perlinTexture, point + L);       // 向光源方向采样一次 获取密度\r\n                       \r\n                        float delta = clamp(density - lightDensity\r\n                                             ,0.0, 1.0);      // 两次采样密度差\r\n\r\n                        vec3 base = mix(baseBright, baseDark, density) * density;   // 基础颜色\r\n\r\n                        float lightPow = 1.; //灯光亮度\r\n                        vec3 light = mix(lightDark*lightPow, lightBright*lightPow, delta);            // 光照对颜色影响\r\n                        \r\n                        vec4 color = vec4(base*light, density);                           // 当前点的最终颜色\r\n                        colorSum = color * (1.0 - colorSum.a) + colorSum;           // 与累积的颜色混合\r\n                    }\r\n\r\n                    return colorSum;\r\n                }\r\n                \r\n                void main(){\r\n                    vec4 cloud = getCloud(v_position.xyz, cameraPos); // 云颜色\r\n                    vec4 fColor;\r\n                    fColor.rgb = fColor.rgb*(1.0 - cloud.a) + cloud.rgb;    // 混色\r\n                    fColor.a = cloud.a;\r\n                    gColor = fColor;\r\n                }\r\n                `\r\n\r\n            } );\r\n            const cloud = new THREE.Mesh( geometry, material );\r\n            cloud.position.y = 100\r\n            return cloud\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped lang='scss'>\r\n.cloudRoot{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n#threeContainer{\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n</style>","import { render } from \"./Cloud.vue?vue&type=template&id=c9276446&scoped=true\"\nimport script from \"./Cloud.vue?vue&type=script&lang=js\"\nexport * from \"./Cloud.vue?vue&type=script&lang=js\"\n\nimport \"./Cloud.vue?vue&type=style&index=0&id=c9276446&scoped=true&lang=scss\"\n\nimport exportComponent from \"C:\\\\Users\\\\hasee\\\\Desktop\\\\简历demo\\\\linshaoping\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-c9276446\"]])\n\nexport default __exports__","import { createRouter, createWebHashHistory } from 'vue-router'\nimport Home from '../views/Home.vue'\nimport Water from '../views/page/Water.vue'\nimport Shadow from '../views/page/Shadow.vue'\nimport Cloud from '../views/page/Cloud.vue'\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Home\n  },\n  {\n    path: '/water',\n    name: 'Water',\n    component: Water\n  },\n  {\n    path: '/shadow',\n    name: 'Shadow',\n    component: Shadow\n  },\n  {\n    path: '/cloud',\n    name: 'Cloud',\n    component: Cloud\n  },\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n})\n\nexport default router\n","import { createApp } from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\n\r\ncreateApp(App).use(router).mount('#app')\r\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--1-0!../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./App.vue?vue&type=style&index=0&id=14635969&lang=scss\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./Water.vue?vue&type=style&index=0&id=b755fbd6&lang=scss&scoped=true\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./Shadow.vue?vue&type=style&index=0&id=540e18f6&lang=scss&scoped=true\""],"sourceRoot":""}